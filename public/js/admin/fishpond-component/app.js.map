{"version":3,"sources":["webpack:///./resources/js/admin/fishpond-component/Input.js","webpack:///./resources/js/admin/fishpond-component/RegisterFishpond.js","webpack:///./resources/js/admin/fishpond-component/app.js"],"names":["config","id","name","label","placeholder","type","min","max","step","required","value","hasError","errorMessage","disabled","reset","this","setError","message","isOk","originalData","title","inputs","diameter","width","long","maxHeight","effectiveHeight","errorInDepth","capacity","wire","undefined","dispatch","waiting","register","updating","init","__buildInputs","input","submit","storeFishpond","updateFishpond","validateRegister","disabledInputs","data","__buildData","then","res","hidden","enabledInputs","notifyErrors","errors","mountFishpond","resetInputs","enabledUpdatingForm","enabledRegisterForm","Object","hasOwnProperty","call","parseInt","max_height","parseFloat","effective_height","validateInput","key","validateName","validateType","validateNumber","validateDepth","length","isNaN","effective","maxValue","effectiveValue","error","window","registerForm","RegisterFishpond","app","showingModal","fishponds","updatingModel","addNewFishpond","push","fishpond","find","x","updateModel","editFishpond","getFishponds","forEach","console","log"],"mappings":"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","file":"/js/admin/fishpond-component/app.js","sourcesContent":["/**\r\n * Contiene el objeto que controla el formulario\r\n * @param {int} id Identificador para la etiqueta y el input\r\n * @param {string} name Nombre del campo en el componente\r\n * @param {string} label Es el valor que se imprime en la etiqueta\r\n * @returns Objeto para el componente alpine\r\n */\r\nconst input = (config) => {\r\n  return {\r\n    id: config.id,\r\n    name: config.name,\r\n    label: config.label,\r\n    placeholder: config.placeholder,\r\n    type: config.type ? config.type : 'text',\r\n    min: config.min,\r\n    max: config.max,\r\n    step: config.step,\r\n    required: config.required,\r\n    value: config.value ? config.value : null,\r\n    hasError: false,\r\n    errorMessage: null,\r\n    disabled: false,\r\n    /**\r\n     * Regresa el formulario a su \r\n     * estado inicial\r\n     */\r\n    reset() {\r\n      this.value = null;\r\n      this.hasError = false;\r\n      this.errorMessage = null;\r\n    },\r\n    /**\r\n     * Actualiza el estado del formulario para notificar que existe un error\r\n     * @param {string} message Mensaje a mostra en la interfaz\r\n     */\r\n    setError(message) {\r\n      this.hasError = true;\r\n      this.errorMessage = message;\r\n    },\r\n    /**\r\n     * Limpia los erroes que este pueda tener\r\n     */\r\n    isOk() {\r\n      this.hasError = false;\r\n      this.errorMessage = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default input;","import input from './Input';\r\n/**\r\n * Componente encargado de controlar el registro \r\n * y la actalización de los estanques de peces.\r\n */\r\nconst RegisterFishpond = {\r\n  /** Es el objeto con la información del estanque original */\r\n  originalData: null,\r\n  /** Es el titulo que se muestra en el formulario */\r\n  title: 'Registrar Estanque',\r\n  /** Contiene las claves de los campos del formulario */\r\n  inputs: {},\r\n  /** Nombre del estanque */\r\n  name: null,\r\n  /** Tipo de estanque */\r\n  type: null,\r\n  /** diameter del estanque circular */\r\n  diameter: null,\r\n  /** Ancho del estanque rectangular */\r\n  width: null,\r\n  /** Longitud del estanque rectangular */\r\n  long: null,\r\n  /** Altura maxima del estanque */\r\n  maxHeight: null,\r\n  /** Altura efectiva del estanque */\r\n  effectiveHeight: null,\r\n  /** Define si la dubla max y efectiva son correcta */\r\n  errorInDepth: false,\r\n  /** Capacidad de peces que puede soportar */\r\n  capacity: null,\r\n  /** Se encarga de hacer las peticiones al servidor */\r\n  wire: undefined,\r\n  /** Encargado de emitir los eventos customizados */\r\n  dispatch: null,\r\n  /** Establece si el componente está esperando la respuesta del servidor */\r\n  waiting: false,\r\n  /** Establece el estado de formulario de reistro */\r\n  register: true,\r\n  /** Establece el estado de formulario de actualización */\r\n  updating: false,\r\n  // *===============================================*\r\n  // *========== Metodos de Inicialización ==========*\r\n  // *===============================================*\r\n  /**\r\n   * Se encarga de inicializar todos los requerimientos del component\r\n   * @param {*} wire Función de livewire\r\n   * @param {*} dispatch Administrador de customevent de alpine\r\n   */\r\n  init(wire, dispatch) {\r\n    this.wire = wire;\r\n    this.dispatch = dispatch;\r\n    this.__buildInputs();\r\n  },\r\n  /**\r\n   * Este metodo es el encargado de crear los campos\r\n   * del formulario de registro\r\n   */\r\n  __buildInputs() {\r\n\r\n\r\n    this.name = input({\r\n      id: 'fishpondName',\r\n      name: 'name',\r\n      label: 'Nombre',\r\n      placeholder: 'Escribe el nombre del estanque',\r\n      required: true,\r\n    });\r\n\r\n    this.type = input({\r\n      id: 'fishpondType',\r\n      name: 'type',\r\n      label: 'Tipo de estanque',\r\n      value: 'rectangular',\r\n      required: true,\r\n    });\r\n\r\n    this.diameter = input({\r\n      id: 'fishponddiameter',\r\n      name: 'diameter',\r\n      label: 'Diametro del Estanque <span class=\"text-xs\">[m]<span>',\r\n      placeholder: 'Ingresa el diametro del estanque',\r\n      type: 'number',\r\n      min: 0.01,\r\n      max: 999.99,\r\n      step: 0.01,\r\n    });\r\n\r\n    this.capacity = input({\r\n      id: 'fishpondCapacity',\r\n      name: 'capacity',\r\n      label: 'Capacidad <span class=\"text-xs\">[und]<span>',\r\n      type: 'number',\r\n      placeholder: 'Ingresa la capacidad del estanque',\r\n      min: 1,\r\n      max: 65535,\r\n      step: 1,\r\n    });\r\n\r\n    this.width = input({\r\n      id: 'fishpondWidth',\r\n      name: 'width',\r\n      label: 'Ancho <span class=\"text-xs\">[m]<span>',\r\n      type: 'number',\r\n      placeholder: 'ej: 200.45',\r\n      min: 0.01,\r\n      max: 999.99,\r\n      step: 0.01,\r\n    });\r\n\r\n    this.long = input({\r\n      id: 'fishpondLong',\r\n      name: 'long',\r\n      label: 'Largo <span class=\"text-xs\">[m]<span>',\r\n      type: 'number',\r\n      placeholder: 'ej: 23.4',\r\n      min: 0.01,\r\n      max: 999.99,\r\n      step: 0.01,\r\n    });\r\n\r\n    this.maxHeight = input({\r\n      id: 'fishpondMaxHeight',\r\n      name: 'maxHeight',\r\n      label: 'Maxima <span class=\"text-xs\">[m]<span>',\r\n      placeholder: 'ej: 3.2',\r\n      type: 'number',\r\n      min: 0.01,\r\n      max: 9.99,\r\n      step: 0.01,\r\n    });\r\n\r\n    this.effectiveHeight = input({\r\n      id: 'fishpondEffectiveHeight',\r\n      name: 'effectiveHeight',\r\n      label: 'Efectiva <span class=\"text-xs\">[m]<span>',\r\n      placeholder: 'ej: 3',\r\n      type: 'number',\r\n      min: 0.01,\r\n      max: 9.99,\r\n      step: 0.01,\r\n    });\r\n\r\n    this.inputs.name = this.name;\r\n    this.inputs.capacity = this.capacity;\r\n    this.inputs.type = this.type;\r\n    this.inputs.diameter = this.diameter;\r\n    this.inputs.width = this.width;\r\n    this.inputs.long = this.long;\r\n    this.inputs.maxHeight = this.maxHeight;\r\n    this.inputs.effectiveHeight = this.effectiveHeight;\r\n\r\n  },\r\n  submit() {\r\n    if (this.register) {\r\n      this.storeFishpond();\r\n    } else if (this.updating) {\r\n      this.updateFishpond();\r\n    }\r\n  },\r\n  storeFishpond() {\r\n    if (this.validateRegister()) {\r\n      this.disabledInputs();\r\n      this.waiting = true;\r\n      let data = this.__buildData();\r\n      const promise = this.wire.storeFishpond(data);\r\n      promise.then(res => {\r\n        if (res.isOk) {\r\n          this.hidden();\r\n          this.enabledInputs();\r\n          this.dispatch('new-fishpond-registered', res.data)\r\n        } else {\r\n          this.notifyErrors(res.errors);\r\n        }\r\n        this.waiting = false;\r\n      });\r\n    }\r\n  },\r\n  updateFishpond() {\r\n    if (this.validateRegister()) {\r\n      this.disabledInputs();\r\n      this.waiting = true;\r\n      let data = this.__buildData();\r\n      const promise = this.wire.updateFishpond(this.originalData.id, data);\r\n      promise.then(res => {\r\n        if (res.isOk) {\r\n          this.hidden();\r\n          this.dispatch('fishpond-updated', res.data)\r\n        } else {\r\n          this.notifyErrors(res.errors);\r\n        }\r\n        this.waiting = false;\r\n        this.enabledInputs();\r\n      });\r\n    }\r\n  },\r\n  /**\r\n   * Se encarga de montar los datos del estanque a los campos del formulario\r\n   * y de actualizar el formulario para que sea de actualización.\r\n   * @param {*} data Instancia de estanque\r\n   */\r\n  mountFishpond(data) {\r\n    //Se resetean los campos\r\n    this.resetInputs();\r\n    //Se cargan los valores\r\n    this.originalData = data;\r\n    this.name.value = data.name;\r\n    this.capacity.value = data.capacity;\r\n    this.diameter.value = data.diameter\r\n    this.width.value = data.width;\r\n    this.long.value = data.long;\r\n    this.maxHeight.value = data.maxHeight;\r\n    this.effectiveHeight.value = data.effectiveHeight;\r\n    this.type.value = data.type;\r\n    //Se habilita el formulario de actualización\r\n    this.enabledUpdatingForm();\r\n  },\r\n  // *================================================*\r\n  // *================== Utilidades ==================*\r\n  // *================================================*\r\n  /**\r\n   * Resetea los campos del formulario y lo restaura \r\n   * a la forma de registro para luego emitir un evento\r\n   * que notifica al componente principal de ocultar el modal\r\n   */\r\n  hidden() {\r\n    this.resetInputs();\r\n    this.enabledRegisterForm();\r\n    this.errorInDepth = false;\r\n    this.dispatch('cancel-register');\r\n  },\r\n  /**\r\n   * Se encarga de resetear el valores de cada uno de los \r\n   * campos del formulario y de eleiminar los posibles errores\r\n   */\r\n  resetInputs() {\r\n    for (const name in this.inputs) {\r\n      if (Object.hasOwnProperty.call(this.inputs, name)) {\r\n        const input = this.inputs[name];\r\n        input.reset();\r\n      }\r\n    }\r\n\r\n    //Se resetea la alerta de profundidad\r\n    this.errorInDepth = false;\r\n\r\n    //Se regresa el tipo al valor por defecto\r\n    this.type.value = 'rectangular';\r\n  },\r\n  /**\r\n   * Se encarga de modificar los parametros del componente \r\n   * para habilitar el formulario a registro\r\n   */\r\n  enabledRegisterForm() {\r\n    this.register = true;\r\n    this.updating = false;\r\n    this.title = \"Registrar Estanque\";\r\n  },\r\n  /**\r\n   * Se encarga de modificar los parametros del componente \r\n   * para habilitar el formulario de actualización\r\n   */\r\n  enabledUpdatingForm() {\r\n    this.register = false;\r\n    this.updating = true;\r\n    this.title = \"Actualizar Registro\";\r\n  },\r\n  /**\r\n   * Se encarga de deshabilitar todos los campos del formulario\r\n   * con el fin de que no sean editados mientras se hace una petición\r\n   */\r\n  disabledInputs() {\r\n    for (const name in this.inputs) {\r\n      if (Object.hasOwnProperty.call(this.inputs, name)) {\r\n        const input = this.inputs[name];\r\n        input.disabled = true;\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * Se encarga de habilitar los campos del formulario\r\n   * una vez que la petición del servidor sea completada\r\n   */\r\n  enabledInputs() {\r\n    for (const name in this.inputs) {\r\n      if (Object.hasOwnProperty.call(this.inputs, name)) {\r\n        const input = this.inputs[name];\r\n        input.disabled = false;\r\n      }\r\n    }\r\n  },\r\n  /**\r\n   * Se encarga de crear la estructura de datos que el servidor utilizará \r\n   * para crear el nuevo registro en la base de datos\r\n   * @returns {object}\r\n   */\r\n  __buildData() {\r\n    let name = this.name.value;\r\n    let capacity = this.capacity.value ? parseInt(this.capacity.value) : null;\r\n    let type = this.type.value;\r\n    let diameter = null;\r\n    let width = null;\r\n    let long = null;\r\n    let max_height = this.maxHeight.value ? parseFloat(this.maxHeight.value): null;\r\n    let effective_height = this.effectiveHeight.value ? parseFloat(this.effectiveHeight.value) : null;\r\n\r\n    //Se establecen los parametros de diseño segun el tipo de estanque\r\n    if(type === 'circular'){\r\n      diameter = this.diameter.value ? parseFloat(this.diameter.value) : null;\r\n    }else if( type === 'rectangular'){\r\n      width = this.width.value ? parseFloat(this.width.value) : null;\r\n      long = this.long.value ? parseFloat(this.long.value) : null;\r\n    }\r\n\r\n\r\n    return {name, capacity, type, diameter, width, long, max_height, effective_height};\r\n  },\r\n  // *================================================*\r\n  // *================= Validaciones =================*\r\n  // *================================================*\r\n  /**\r\n   * Este metodo se encarga de validar el campo del formulario\r\n   * @param {string} name Clave de identificación del campo a vaidar\r\n   */\r\n  validateInput(key) {\r\n    //Se recupera el objeto que constrola el campo\r\n    let input = this.inputs[key];\r\n\r\n    //Se valida si el campo es requerido\r\n    if (key === 'name') {\r\n      this.validateName();\r\n    } else if (key === 'type') {\r\n      this.validateType();\r\n    } else {\r\n      this.validateNumber(input);\r\n    }\r\n\r\n    //Reglas adicionales para gestionar la profundidad\r\n    if (key === 'maxHeight' || key === 'effectiveHeight') {\r\n      this.validateDepth();\r\n    }\r\n  },\r\n  /**\r\n   * Contiene las reglas de validación para el campo nombre\r\n   * @param {input} input Objeto con los parametros del campo\r\n   */\r\n  validateName() {\r\n    let value = this.name.value;\r\n    if (value && value.length > 0) {\r\n      if (value.length < 3) {\r\n        this.name.setError(\"Nombre demasiado corto\");\r\n      } else if (value.length > 20) {\r\n        this.name.setError('El nombre es demasiado largo');\r\n      } else {\r\n        this.name.isOk();\r\n      }\r\n    } else {\r\n      this.name.setError('Este campo es requerido.');\r\n    }\r\n  }, //end method\r\n  validateType() {\r\n    let value = this.type.value;\r\n    if (value === 'circular' || value === 'rectangular') {\r\n      this.type.isOk();\r\n    } else {\r\n      this.type.setError('Tipo de estanque inválido');\r\n    }\r\n  },\r\n  /**\r\n   * Este metodo se encarga de verificar que el valor del campo\r\n   * sea un numero valido y ademas controla las validaciones del mismo\r\n   * @param {*} input Objeto con la información del campo a calidar\r\n   */\r\n  validateNumber(input) {\r\n    let value = input.value;\r\n\r\n    /**\r\n     * Como esstos campos no son obligatorios la validación solo se hace\r\n     * unicamente cuando el campo tiene algun valor\r\n     */\r\n    if (value) {\r\n      value = parseFloat(input.value);\r\n      //Se verifica que es un numero válido\r\n      if (!isNaN(value)) {\r\n        if (typeof input.min !== 'undefined' && typeof input.max !== 'undefined') {\r\n          if (value >= input.min) {\r\n            if (value <= input.max) {\r\n              input.isOk();\r\n            } else {\r\n              input.setError(`Debe ser menor o igual que ${input.max} m`);\r\n            }\r\n          } else {\r\n            input.setError(`Debe ser mayor o igual que ${input.min}  m`);\r\n          }\r\n        } else {\r\n          if (typeof input.min !== 'undefined') {\r\n            if (value >= input.min) {\r\n              input.isOk();\r\n            } else {\r\n              input.setError(`Debe ser mayor o igual que ${input.min}  m`);\r\n            }\r\n          } else if (typeof input.max !== 'undefined') {\r\n            if (value <= input.max) {\r\n              input.isOk();\r\n            } else {\r\n              input.setError(`Debe ser menor o igual que ${input.max} m`);\r\n            }\r\n          } else {\r\n            input.isOk();\r\n          }\r\n        }\r\n\r\n      } else {\r\n        input.setError(`valor inválido`);\r\n      }\r\n    } else {\r\n      input.isOk();\r\n    }\r\n\r\n  },\r\n  /**\r\n   * Este metodo es el encargado de verificar que los campos\r\n   * introducidos por el usuario son correctos y darle paso al\r\n   * a que el componente realice la peticion\r\n   * @returns {boolean}\r\n   */\r\n  validateRegister() {\r\n    let isOk = true;\r\n    for (const name in this.inputs) {\r\n      if (Object.hasOwnProperty.call(this.inputs, name)) {\r\n        const input = this.inputs[name];\r\n        this.validateInput(name);\r\n        if (input.hasError) {\r\n          isOk = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.validateDepth();\r\n\r\n    return isOk && !this.errorInDepth;\r\n  },\r\n  /**\r\n   * Se encarga de verificar que los campos de la profundiad sean correctos\r\n   * verificando que la profundiad maxima sea mayor o igual que la efectiva\r\n   */\r\n  validateDepth() {\r\n    let max = this.maxHeight;\r\n    let effective = this.effectiveHeight;\r\n    let maxValue = parseFloat(max.value);\r\n    let effectiveValue = parseFloat(effective.value);\r\n\r\n    if (!isNaN(maxValue) && !isNaN(effectiveValue)) {\r\n      if(maxValue >= effectiveValue){\r\n\r\n        /**\r\n         * Solo se eliminan las alertas si el campon tiene un error\r\n         * y el mensaje que tienen es un campo vacio\r\n         */\r\n\r\n        if(max.hasError && max.errorMessage.length <= 0){\r\n          max.isOk();\r\n        }\r\n\r\n        if(effective.hasError && effective.errorMessage.length <= 0){\r\n          effective.isOk();\r\n        }\r\n\r\n        this.errorInDepth = false;\r\n      }else{\r\n\r\n        /**\r\n         * Solo se agregan las alertas vaciías si el campo\r\n         * no tienen errores de ningun tipo.\r\n         */\r\n        if(!max.hasError){\r\n          max.setError('');\r\n        }\r\n\r\n        if(!effective.hasError){\r\n          effective.setError('');\r\n        }\r\n        this.errorInDepth = true;\r\n      }\r\n    }else{\r\n      if(max.hasError && max.errorMessage.length <= 0){\r\n        max.isOk();\r\n      }\r\n\r\n      if(effective.hasError && effective.errorMessage.length <= 0){\r\n        effective.isOk();\r\n      }\r\n\r\n      this.errorInDepth = false;\r\n    }\r\n  },\r\n  /**\r\n   * Se encarga de notificar a la vista los erroes provenientes del\r\n   * servidor\r\n   */\r\n  notifyErrors(errors) {\r\n    for (const key in errors) {\r\n      if (Object.hasOwnProperty.call(errors, key)) {\r\n        const error = errors[key];\r\n        if (Object.hasOwnProperty.call(this.inputs, key)) {\r\n          this.inputs[key].setError(error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default RegisterFishpond;","import RegisterFishpond from './RegisterFishpond';\r\n\r\nwindow.registerForm = () => {\r\n  return RegisterFishpond;\r\n} \r\n  \r\n\r\n\r\n\r\nwindow.app = ()=>{\r\n  return{\r\n    showingModal: false,\r\n    wire: undefined,\r\n    dispatch: undefined,\r\n    fishponds: [],\r\n    updatingModel: false,\r\n    addNewFishpond(data){\r\n      this.fishponds.push(data);\r\n    },\r\n    updateFishpond(data){\r\n      //Recupero la instancia del estanque actualizado\r\n      let fishpond = this.fishponds.find(x => x.id === data.id);\r\n      if(fishpond){\r\n        for (const key in data) {\r\n          if (Object.hasOwnProperty.call(data, key)) {\r\n            fishpond[key] = data[key];\r\n          }\r\n        }\r\n      }\r\n    },\r\n    init(wire, dispatch){\r\n      this.wire = wire;\r\n      this.dispatch = dispatch;\r\n      this.updateModel();\r\n    },\r\n    editFishpond(fishpond){\r\n      this.showingModal = true;\r\n      this.dispatch('edit-fishpond', fishpond);\r\n    },\r\n    updateModel(){\r\n      this.updatingModel = true;\r\n      this.wire.getFishponds().then(res => {\r\n        res.forEach(data => {\r\n          this.addNewFishpond(data);\r\n        });\r\n\r\n        this.updatingModel = false;\r\n      }).catch(error => {\r\n        console.log(error);\r\n        this.updatingModel = false;\r\n      })\r\n    },\r\n  }\r\n}\r\n"],"sourceRoot":""}